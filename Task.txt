ðŸ§  AI Agent Prompt: Implement Rich Text Editing with TinyMCE in Next.js Admin Panel

ðŸ”¹ Context
I have a Next.js application that includes an /admin route for content management. The application currently uses Prisma as the ORM for accessing and editing data via API.

The existing editing functionality uses basic modals and plain text input. I would like to upgrade the editing experience to a rich text editor using TinyMCE, so that admin users can style text (e.g., bold, italic, links, etc.).

ðŸŽ¯ Objective
Upgrade the text editing component in /admin to use TinyMCE for rich text editing. The TinyMCE editor should be:
- Embedded in the admin page.
- Configured to support common formatting options.
- Securely initialized using the environment variable: NEXT_PUBLIC_TINY_CLOUD_KEY.
- Integrated with the existing data handling flow (Prisma + API routes).
- The edited content should be saved to the database as HTML.

âœ… Requirements

1. Install TinyMCE
Use the official TinyMCE React integration:

    npm install @tinymce/tinymce-react

2. Configure the .env File
Ensure the .env.local file includes the following key:

    NEXT_PUBLIC_TINY_CLOUD_KEY=your_tinymce_api_key_here

This key will be used to initialize TinyMCE on the client side.

3. Update the Edit Modal Component
Replace the existing <textarea> or text input with TinyMCE.

Example EditModal.tsx:

    import { Editor } from '@tinymce/tinymce-react';
    import { useRef } from 'react';

    const EditModal = ({ initialValue, onSave }) => {
      const editorRef = useRef(null);

      const handleSave = () => {
        const content = editorRef.current?.getContent();
        onSave(content); // Send content (HTML) to API
      };

      return (
        <div>
          <Editor
            apiKey={process.env.NEXT_PUBLIC_TINY_CLOUD_KEY}
            onInit={(evt, editor) => editorRef.current = editor}
            initialValue={initialValue}
            init={{
              height: 400,
              menubar: false,
              plugins: [
                'advlist autolink lists link charmap preview anchor',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table paste help wordcount'
              ],
              toolbar:
                'undo redo | formatselect | bold italic backcolor |                 alignleft aligncenter alignright alignjustify |                 bullist numlist outdent indent | removeformat | help'
            }}
          />
          <button onClick={handleSave}>Save</button>
        </div>
      );
    };

Make sure to adapt this component according to your modal logic and styling.
