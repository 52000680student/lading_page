AI Agent Task: Display Detailed Result View

Objective:
Implement the functionality to view detailed information for a test result when a user clicks on an item. This involves fetching and combining data from multiple APIs and rendering it appropriately in the UI.

Step-by-step Instructions:

1. Extract Administrative Information
- When a result item is clicked, retrieve the following data from the selected item:
    - `id`
    - Administrative fields (e.g., `requestId`, `profileCode`, etc.)

2. Fetch Result Profile Data
- API Endpoint: GET /api/la/v1/results/{id}/profile-updateresults?isTestSend=false
- Use the `id` from step 1.
- Response: A list of profiles associated with the result.
- Example response contains fields like: `profileCode`, `effectiveTime`, etc.
Response example:
[
    {
        "id": 8743,
        "requestProfileId": 8743,
        "resultProfileId": 8681,
        "comment": null,
        "finalComment": null,
        "createdBy": 999999,
        "updatedBy": 1,
        "profileCode": "E-HH049",
        "profileCategory": "HH",
        "profileCategoryName": "HUYẾT HỌC",
        "vendorCode": null,
        "sentTime": null,
        "sentUser": null,
        "sentUserId": null,
        "displayOrder": 2099999,
        "effectiveTime": "2025-08-01T10:09:18.6703921",
        "userTransferId": null,
        "transferredTime": null,
        "transferred": null,
        "requestId": 11339
    },
    ....
]

3. Retrieve Full Test Profiles
- API Endpoint: POST /api/la/v1/profiles/getFullTestProfileByListCode
- Build the payload from the response in step 2 using:
    ```json
    {
        "codes": [
            { "Code": profileCode, "EffectiveTime": effectiveTime },
            ...
        ]
    }
    ```
- This will return details of each test profile including nested children if it is a test suite.
Response example:
[
  {
    "id": 102,
    "code": "E-HH049",
    "name": "Full blood count (FBC)",
    "type": 1,
    "category": "HH",
    "categoryName": "HUYẾT HỌC",
    "parentId": 0,
    "parentName": null,
    "parentCode": null,
    "groupCode": null,
    "sampleType": null,
    "reportTypeName": null,
    "sampleTypeName": null,
    "mbNumType": null,
    "mbNumTypeName": null,
    "subSID": 0,
    "displayOrder": 99999,
    "status": true,
    "effectiveTime": "0001-01-01T00:00:00",
    "children": [
        {
            "id": 2653,
            "code": "E-HH049.01",
            "name": "Red Blood Cell (RBC)",
            "type": 0,
            "category": "HH",
            "categoryName": "HUYẾT HỌC",
            "parentId": 102,
            "parentName": "Full blood count (FBC)",
            "parentCode": "E-HH049",
            "groupCode": null,
            "sampleType": "E",
            "reportTypeName": "TQ",
            "sampleTypeName": "Máu [EDTA]",
            "mbNumType": null,
            "mbNumTypeName": null,
            "subSID": 0,
            "displayOrder": 0,
            "status": true,
            "effectiveTime": "0001-01-01T00:00:00",
            "children": [],
            "hasChildren": false
        },
        .....
    ],
    "hasChildren": true
}
]

4. Retrieve Detailed Test Results
- API Endpoint: GET /api/la/v1/results/{id}/test-updateresults?isTestSend=false&isMBTest=false
- Use the same `id` from step 1.
- Filter the response to retain only the following fields per test:
    - `result`, `resultText`, `oldResult`, `download`, `testCode`, `unit`
    - `lowerWarning`, `lowerLimit`, `normalRange`, `state`, `color`

Response example:
[
    {
        "id": 152617,
        "resultTestId": 151155,
        "profileCode": "E-HH049",
        "createdBy": 999999,
        "updatedBy": 1,
        "requestDate": "2025-08-01T00:00:00",
        "sid": 108250003,
        "resultDate": null,
        "patientId": "2404001067",
        "testCode": "E-HH049.01",
        "testId": 2302,
        "testType": 0,
        "machineCode": null,
        "oldResult": null,
        "result": "1",
        "resultText": "",
        "unit": "T/L",
        "state": 90,
        "companyId": 1,
        "machineId": 0,
        "port": 0,
        "upload": false,
        "runTime": null,
        "validatedDate": "2025-08-01T17:10:53.2637279",
        "validatedBy": "System Administrator",
        "comment": null,
        "departmentId": 8,
        "lowerLimit": 3.8,
        "lowerWarning": null,
        "higherLimit": 6,
        "higherWarning": null,
        "normalRange": "3,8 - 6",
        "normalRangeWarning": null,
        "expression": null,
        "machineName": null,
        "testCategory": "HH",
        "testCount": 0,
        "isManual": true,
        "isFirstTime": false,
        "createdByRequest": 1,
        "confirmedDate": "2025-08-01T17:10:48.2028185",
        "printTime": null,
        "confirmedBy": "System Administrator",
        "isCreatedBySystem": false,
        "message": null,
        "download": false,
        "downloadRejected": false,
        "color": "1",
        "runRule": null,
        "typeName": "Thường Quy",
        "reportTypeName": "TQ",
        "applyScreen": null,
        "estimatedTime": "0001-01-01T00:00:00",
        "sentTime": null,
        "sentUserId": 0,
        "sentUserName": null,
        "sentUser": null,
        "vendorCode": null,
        "resultId": 151155,
        "signedBy": null,
        "signedUser": null,
        "signedDate": null,
        "sampleType": "E",
        "sampleTypeName": "Máu [EDTA]",
        "isCollectedOrReceived": true,
        "displayOrder": 2099999,
        "createdMethod": "TC",
        "effectiveTime": "2025-08-01T10:09:18.821747",
        "userTransferId": null,
        "transferredTime": null,
        "transferred": null,
        "requestId": 11339,
        "collectiontime": "2025-08-01T17:09:00",
        "deliveryTime": "2025-08-01T17:09:00",
        "receivedTime": "2025-08-01T17:09:00",
        "collectorUserName": "System Administrator",
        "deliveryUserName": "System Administrator",
        "receiverUserName": "System Administrator",
        "sttgpb": null,
        "isMBTest": false,
        "microField": null,
        "sttvs": null,
        "sampleLocation": null,
        "mbResultTests": [],
        "amrResultTests": [],
        "entryCode": null,
        "isMicroStain": null,
        "companyName": "IOLIS CLINIC",
        "departmentName": "Phòng khám bác sĩ gia đình Chân Trời Mới"
    },
    ....................
]

5. Render the Result Table
- Combine the data from step 3 and step 4:
    - Match by `testCode` (from step 4) and `code` (from step 3 or children of step 3).
- If the profile has `hasChildren = true` (i.e., a test suite):
    - Render it with collapsible sections using the parent name.
    - Each child entry is a test row under its parent.
- If `hasChildren = false`:
    - Render as a standard row in the result table.

6. Apply Result Formatting Based on `color`:
- If `color == 0`: Display result text in black, center aligned.
- If `color == 1`: Display result text in blue (rgb(0, 0, 255)), left aligned.
- If `color == 2`: Display result text in red, right aligned.

7. Fetch and Display Final Comment
- API Endpoint: GET /api/la/v1/results/{id}/result-comment
- Extract the field `finalComment` and display it below the result table as the general conclusion.
Response example: {
    "id": 10991,
    "requestId": 11336,
    "finalComment": "test",
    "createdBy": 999999,
    "createdDate": "2025-08-01T13:46:26.2309229",
    "updatedBy": 1,
    "updatedDate": "2025-08-01T14:30:55.8338532",
    "stainComment": null,
    "cultureComment": null,
    "drugResComment": null
}

Output:
- A detailed results page that includes all matched test details and conclusion comments.
- The structure should clearly separate individual tests and test suites with collapsible functionality.